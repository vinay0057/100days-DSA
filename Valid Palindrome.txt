Problem - A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

 

Example 1:
Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.

Example 2:
Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.

Example 3:
Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.

Solution - 

# My brute force approach was quite different , i made a two strings, where the first string lower case the original string, then another empty string to store non-alphanumeric string, and then perform operation in it.

# The problem with my brute force approach was, a bit time taking, cause the filtration process i am following was, mentioned below.


/*for(int i=0; i<lws.length(); i++){
            if((lws.charAt(i) >= 'a' && lws.charAt(i) <= 'z') || (lws.charAt(i) >= '0' && lws.charAt(i) <= '9')){
                str += lws.charAt(i);
            }
        }*/

# In this process every time a new string obj was created, which was a bit time consuming, and not memory effiecient, therefor i use string builder, as it has mutable nature.

# Also i know about the character wrapper class too, as i have used Character.isLetterOrDigit() method, Character.toLowerCase() method.

class Solution {
    public boolean isPalindrome(String s) {
        StringBuilder sb = new StringBuilder("");

        for (char i : s.toCharArray()) {
            if (Character.isLetterOrDigit(i)) {
                sb.append(Character.toLowerCase(i));
            }
        }

        int i = 0;
        int j = sb.length()-1;

        while(i<j){
            if(sb.charAt(i++) != sb.charAt(j--)){
                return false;
            }
        }
        return true;
    }
}